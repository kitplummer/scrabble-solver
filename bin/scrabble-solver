#!/usr/bin/env ruby

require 'optparse'
require File.dirname(__FILE__) + '/../lib/scrabble-solver'

options = Hash.new(nil)

# Use the optparse library to populate the options hash.
OptionParser.new do |o|
  o.banner = 'Usage: scrabble-solver tiles [options]'

  # Add the README contents to the --help flag.
  o.separator "\n" + File.read(File.dirname(__FILE__) + '/../README.md') + "\n"

  o.separator "Optional arguments:"

  o.on '-h', '--help', 'Display this message' do
    puts o
    exit
  end

  o.on '--longer-than LENGH',
       'Only return words longer than LENGTH.' do |length|
    options[:longer_than] = length
  end

  o.on '--shorter-than LENGH',
       'Only return words shorter than LENGTH.' do |length|
    options[:shorter_than] = length
  end

  o.on '--starts-with PREFIX',
       'Only return words that start with PREFIX.' do |prefix|
    options[:starts_with] = prefix
  end

  o.on '--ends-with SUFFIX',
       'Only return words that end with SUFFIX.' do |suffix|
    options[:ends_with] = suffix
  end

  o.on '--contains PART',
       'Only return words that contain PART. Must be combined with --at.' do |part|
    options[:contains] = part
  end

  o.on '--at INDEX',
       'The index to search for --contains at.' do |index|
    options[:at] = index
  end

  o.on '--word-file FILE',
       'The word file to use. Defaults to a preset list of words.' do |file|
    options[:word_file] = file
  end
  
  o.on '--wide', '-w', 
    'Display output by number of letters in a single line' do |wide|
      options[:wide] = true
  end
    
end.parse!

# Pull the tiles from the first argument.
letters = ARGV[0]

# Exit the program if no first argument was supplied.
if letters.nil?
  puts "You need to supply letters to work with as the first argument."
  exit
end

# If all is well, solve :)
words = Scrabble::Solver.words_for(letters, options).sort do |word1, word2|
  word1.length <=> word2.length
end

# Section out list of words by letter count and single lines
if options[:wide]
  words = words.join(' ')
end

puts words
